stages:
  - preparation
  - testing
  - deploy

image: thecodingmachine/php:8.1-v4-slim-cli

# Variables
variables:
  MYSQL_ROOT_PASSWORD: root
  MYSQL_USER: mysql_user
  MYSQL_PASSWORD: mysql_password
  MYSQL_DATABASE: mysql_db
  DB_HOST: mysql

cache:
  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"

composer:
  stage: preparation
  script:
    - php -v
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts
    - cp .env.example .env
    - php artisan key:generate
  artifacts:
    paths:
      - vendor/
      - .env
    expire_in: 1 days
    when: always
  cache:
    paths:
      - vendor/

phpunit:
  stage: testing
  services:
    - name: mariadb:10
  # Download the artifacts for these jobs
  dependencies:
    - composer
  script:
    - php -v
    - sudo cp /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini /usr/local/etc/php/conf.d/docker-php-ext-xdebug.bak
    - echo "" | sudo tee /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
    - ./vendor/phpunit/phpunit/phpunit --version
    - php -d short_open_tag=off ./vendor/phpunit/phpunit/phpunit -v --colors=never --stderr
    - sudo cp /usr/local/etc/php/conf.d/docker-php-ext-xdebug.bak /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
  artifacts:
    paths:
      - ./storage/app/log # for debugging
      - ./storage/logs # for debugging
    expire_in: 1 days
    when: on_failure

codestyle:
  stage: testing
  image: lorisleiva/laravel-docker
  script:
    - phpcs --extensions=php app
  dependencies: []

security-checker:
  stage: testing
  needs:
    - job: composer
      artifacts: true
  script:
    - vendor/bin/security-checker security:check composer.lock

# deploy_dev:
#   stage: deploy
#   needs:
#     - job: composer
#       artifacts: true
#   script:
#     - eval $(ssh-agent -s)
#     - ssh-add <(echo "$DEV_SSH_PRIVATE_KEY")
#     - mkdir -p ~/.ssh
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#     - echo "DEPLOY_DEV_USER=$DEPLOY_DEV_USER" >> .env
#     - echo "DEPLOY_DEV_HOST=$DEPLOY_DEV_HOST" >> .env
#     - echo "DEPLOY_DEV_PATH=$DEPLOY_DEV_PATH" >> .env
#     - ./vendor/bin/envoy run deploy
#   only:
#     - develop

# deploy_prod:
#   stage: deploy
#   needs:
#     - job: composer
#       artifacts: true
#   script:
#     - eval $(ssh-agent -s)
#     - ssh-add <(echo "$PROD_SSH_PRIVATE_KEY")
#     - mkdir -p ~/.ssh
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#     - echo "DEPLOY_PROD_USER=$DEPLOY_PROD_USER" >> .env
#     - echo "DEPLOY_PROD_HOST=$DEPLOY_PROD_HOST" >> .env
#     - echo "DEPLOY_PROD_PATH=$DEPLOY_PROD_PATH" >> .env
#     - ./vendor/bin/envoy run deploy --server=prod
#   only:
#     - master
#   when: manual
